name: build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  # This step gets the commit message from either push or pull request:
  # https://github.community/t/accessing-commit-message-in-pull-request-event/17158/8
  pre_ci:
    name: Prepare CI environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: "[Push] Get commit message"
        if: github.event_name == 'push'
        id: push_get_commit_message
        run: |
          echo ::set-output name=push_commit_message::$(git log --format=%B -n 1 HEAD)
          echo $(git log --format=%B -n 1 HEAD)

      - name: "[Pull Request] Get commit message"
        if: github.event_name == 'pull_request'
        id: pr_get_commit_message
        run: |
          echo ::set-output name=pr_commit_message::$(git log --format=%B -n 1 HEAD^2)
          echo $(git log --format=%B -n 1 HEAD^2)

    outputs:
      commit_message: $( [ -z "${{ steps.pr_get_commit_message.outputs.pr_commit_message }}" ] && echo "${{ steps.push_get_commit_message.outputs.push_commit_message }}" || echo "${{ steps.pr_get_commit_message.outputs.pr_commit_message }}" )


  build-package:
    needs: pre_ci
    # Skip the job if the message contains [docs-only] 
    if: "!contains(needs.pre_ci.outputs.commit_message, '[docs-only]')"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.6, 3.7, 3.8]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cython --install-option='--no-cython-compile'
      - name: Install
        run: |
          pip install -r requirements-dev.txt
      - name: Lint with flake8
        run: |
          invoke lint
      - name: Test import
        run: |
          python -c "import compas_view2"
      - name: Test with pytest
        run: |
          invoke test
